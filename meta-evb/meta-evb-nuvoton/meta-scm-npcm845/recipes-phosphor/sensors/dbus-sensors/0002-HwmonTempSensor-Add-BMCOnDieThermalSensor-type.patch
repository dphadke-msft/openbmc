From c8b39b2429d562d30ff66e0c117af3f6a1991d93 Mon Sep 17 00:00:00 2001
From: Brian Ma <chma0@nuvoton.com>
Date: Tue, 22 Feb 2022 14:06:45 +0800
Subject: [PATCH] HwmonTempSensor: Add BMCOnDieThermalSensor type
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Now we create the BMCOnDieThermalSensor sensor type to support thermal
sensor in thermal zone. User can add BMCOnDieThermalSensor type sensor
if the BMC defined thermal sensors in thermal zone in DTS to monitor
the BMC CPU temperature or other on DIE thermal sensors.

To identify each thermal zone, user should use "Index" to match each
thermal zone sensor. For following DTS example, we will get
thermal_zone0 and thermal_zone1 at the sys fs,  user must be configured
them with Index: 0 and 1.

Due to the BMC model is known at compile time, user should create a
stand alone configuration with probe statement for
"BMCOnDieThermalSensor" type sensors.

Tested example:
DTS:
thermal-zones {
    cpu0_thermal: cpu0-thermal {
        polling-delay-passive = <250>;
        polling-delay = <1000>;
        thermal-sensors = <&tmps 0>;
        trips {
            cpu0_alert0: trip-point0 {
                temperature = <90000>;
                hysteresis = <2000>;
                type = "passive";
            };
        };
    };
    cpu1_thermal: cpu1-thermal {
        thermal-sensors = <&tmps 1>;
        ...
    };
};

Entity manager configuration =>
        {
            "Index": "0",
            "Name": "BMC_CPU_Temp0",
            "Thresholds": [
...
            ],
            "Type": "BMCOnDieThermalSensor"
        },
        {
            "Index": "1",
            "Name": "BMC_CPU_Temp1",
...
            "Type": "BMCOnDieThermalSensor"
        },

root@evb-npcm845:~# busctl tree xyz.openbmc_project.HwmonTempSensor
└─/xyz
  └─/xyz/openbmc_project
    └─/xyz/openbmc_project/sensors
      └─/xyz/openbmc_project/sensors/temperature
        ├─/xyz/openbmc_project/sensors/temperature/BMC_CPU_Temp0
        ├─/xyz/openbmc_project/sensors/temperature/BMC_CPU_Temp1
        └─ ...

Signed-off-by: Brian Ma <chma0@nuvoton.com>
Change-Id: I9a7c996a17dfdab257bb83cfea5122e7857aeab8
Signed-off-by: Joseph Liu <kwliu@nuvoton.com>
---
 src/HwmonTempMain.cpp | 94 ++++++++++++++++++++++++++++++-------------
 1 file changed, 67 insertions(+), 27 deletions(-)

diff --git a/src/HwmonTempMain.cpp b/src/HwmonTempMain.cpp
index 75200378..dfa32e27 100644
--- a/src/HwmonTempMain.cpp
+++ b/src/HwmonTempMain.cpp
@@ -50,7 +50,8 @@ static constexpr double minValueTemperature = -128; // DegreesC
 
 namespace fs = std::filesystem;
 static auto sensorTypes{
-    std::to_array<const char*>({"xyz.openbmc_project.Configuration.DPS310",
+    std::to_array<const char*>({"xyz.openbmc_project.Configuration.BMCOnDieThermalSensor",
+		                "xyz.openbmc_project.Configuration.DPS310",
                                 "xyz.openbmc_project.Configuration.EMC1412",
                                 "xyz.openbmc_project.Configuration.EMC1413",
                                 "xyz.openbmc_project.Configuration.EMC1414",
@@ -194,16 +195,33 @@ static SensorConfigMap
             const SensorBaseConfigMap& cfg = cfgmap.second;
             auto busCfg = cfg.find("Bus");
             auto addrCfg = cfg.find("Address");
-            if ((busCfg == cfg.end()) || (addrCfg == cfg.end()))
+            auto indexCfg = cfg.find("Index");
+            SensorConfigKey key;
+            if (indexCfg == cfg.end())
             {
-                continue;
-            }
+                if ((busCfg == cfg.end()) || (addrCfg == cfg.end()))
+                {
+                    continue;
+                }
 
-            if ((!std::get_if<uint64_t>(&busCfg->second)) ||
-                (!std::get_if<uint64_t>(&addrCfg->second)))
+                if ((!std::get_if<uint64_t>(&busCfg->second)) ||
+                    (!std::get_if<uint64_t>(&addrCfg->second)))
+                {
+                    std::cerr << sensor.first.str
+                              << " Bus or Address invalid\n";
+                    continue;
+                }
+                key = {.bus = std::get<uint64_t>(busCfg->second),
+                       .addr = std::get<uint64_t>(addrCfg->second)};
+            }
+            else
             {
-                std::cerr << sensor.first.str << " Bus or Address invalid\n";
-                continue;
+                if (!std::get_if<uint64_t>(&indexCfg->second))
+                {
+                    std::cerr << sensor.first.str << " Index invalid\n";
+                    continue;
+                }
+                key = {.bus = 0, .addr = std::get<uint64_t>(indexCfg->second)};
             }
 
             std::vector<std::string> hwmonNames;
@@ -225,8 +243,6 @@ static SensorConfigMap
                 }
             }
 
-            SensorConfigKey key = {std::get<uint64_t>(busCfg->second),
-                                   std::get<uint64_t>(addrCfg->second)};
             SensorConfig val = {sensor.first.str, sensor.second, cfgmap.first,
                                 cfg, hwmonNames};
 
@@ -300,29 +316,53 @@ void createSensors(
                     device = directory / "device";
                     deviceName = fs::canonical(device).stem();
                 }
-                auto findHyphen = deviceName.find('-');
-                if (findHyphen == std::string::npos)
-                {
-                    std::cerr << "found bad device " << deviceName << "\n";
-                    continue;
-                }
-                std::string busStr = deviceName.substr(0, findHyphen);
-                std::string addrStr = deviceName.substr(findHyphen + 1);
 
                 uint64_t bus = 0;
                 uint64_t addr = 0;
-                std::from_chars_result res;
-                res = std::from_chars(busStr.data(),
-                                      busStr.data() + busStr.size(), bus);
-                if (res.ec != std::errc{})
+                std::string busStr, addrStr;
+                auto findHyphen = deviceName.find('-');
+                if (findHyphen == std::string::npos)
                 {
-                    continue;
+                    static const std::string thermalZone = "thermal_zone";
+                    auto findBmcThermal = deviceName.find(thermalZone);
+                    if (findBmcThermal == std::string::npos)
+                    {
+                        std::cerr << "found bad device " << deviceName << "\n";
+                        continue;
+                    }
+                    // ex: thermal_zone0
+                    addrStr = deviceName.substr(findBmcThermal +
+                                                thermalZone.length());
+                    try
+                    {
+                        addr = std::stoi(addrStr);
+                    }
+                    catch (const std::invalid_argument&)
+                    {
+                        std::cerr << "Cannot get zone number: " << deviceName
+                                  << "\n";
+                        continue;
+                    }
                 }
-                res = std::from_chars(
-                    addrStr.data(), addrStr.data() + addrStr.size(), addr, 16);
-                if (res.ec != std::errc{})
+                else
                 {
-                    continue;
+                    busStr = deviceName.substr(0, findHyphen);
+                    addrStr = deviceName.substr(findHyphen + 1);
+                    std::from_chars_result res;
+                    res = std::from_chars(busStr.data(),
+                                          busStr.data() + busStr.size(), bus);
+
+                    if (res.ec != std::errc{})
+                    {
+                        continue;
+                    }
+                    res = std::from_chars(addrStr.data(),
+                                          addrStr.data() + addrStr.size(), addr,
+                                          16);
+                    if (res.ec != std::errc{})
+                    {
+                        continue;
+                    }
                 }
 
                 auto thisSensorParameters = getSensorParameters(path);
-- 
2.34.1

